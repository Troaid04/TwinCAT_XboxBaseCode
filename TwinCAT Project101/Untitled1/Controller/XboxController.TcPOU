<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="XboxController" Id="{6365a5dc-96c0-42bf-a26d-9812d6df8683}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM XboxController
VAR

	XboxController1 			: 		FB_Xbox_Controller(NetID := '', iControllerNumber := 1);	
	bIsConnected   				:  		ARRAY [1..2] OF BOOL;
	XpPosition					:		ARRAY [1..2] OF MoverVector; 
	MoverPos					: 		ARRAY [1..2] OF MoverVector;
	invertX						: 		LREAL;
	invertY						: 		LREAL;
	DestinationX				: 		DINT;
	DestinationY				: 		DINT;
	NearestRotationPoint		: 		PositionXYC;
	RotationScailing			: 		LREAL := 0.0002;
	StartTimer					: 		BOOL;
	Timer						: 		TON;
	SnapVAR						: 		BOOL;
	C_VALUE						: 		LREAL;
	MODDED_C					: 		LREAL;
	MoveToC						: 		LREAL;
	ShortestCMove				: 		PositionXYC;
	START						: 		BOOL;
	Ready						: 		BOOL; 
	
	
	
	SanitizedX					: 		LREAL;
	SanitizedY					: 		LREAL;
	SetPointX					: 		REAL;
	SetPointY					: 		REAL;
	ControllerP_Err_X			: 		LREAL;
	ControllerI_Err_X			: 		LREAL;
	ControllerD_Err_X			: 		LREAL;
	ControllerP_Err_Y			: 		LREAL;
	ControllerI_Err_Y			: 		LREAL;
	ControllerD_Err_Y			: 		LREAL;
	PrevSetPointX	 			: 		LREAL;
	PrevSetPointY	 			: 		LREAL;
	PrevSanitizedX				: 		LREAL;
	PrevSanitizedY				: 		LREAL;
	MaxRateOfChange				: 		LREAL;
	IntegralLimit				: 		LREAL;
	MaxIntegralError			: 		LREAL;
	OutputMagnitude				: 		LREAL;
	OutputDirection				: 		LREAL;
	PrevOutputMagnitude			: 		LREAL;
	OutputDistance				: 		LREAL;
	ZeroVector 					: 		MoverVector ;
	nCase						: 		INT := 1;
	Alpha						: 		LREAL := 0.01;
	MaxVelocity					:		LREAL := 10; 
	PastPos10					: 		BOOL;
	PastNeg10					: 		BOOL; 
	BOOL1                       :       BOOL;	
	BOOL2                       :       BOOL;	
	BOOL3						:       BOOL;
	XPoint						: 		BOOL;
	YPoint						: 		BOOL;	
	Height 						: 		LREAL := 2; 
	RESET						:	 	BOOL;
	Go							:		BOOL;
	R_TRIG1						: 		R_TRIG;
	R_TRIG2						: 		R_TRIG;
	SmoothingTon1				:		TON;
	SmoothingTon2				:		TON;
	Ton1						:		TON;
	Ton2						:		TON;
	TRIGGER1					: 		BOOL;
	TRIGGER2					: 		BOOL;
	XPos						: 		INT;
	YPos						: 		INT;
	MaxPosRot					: 		LREAL;
	MaxNegRot					: 		LREAL;
	
	

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Xbox Controller 1 
XboxController1.Cycle();
bIsConnected[1] := XboxController1.P_Status.bConnected; 

MoverPos[1] := Planar_Mover.fbMover[1].MCTOPLC.ACT.ActPos;

IF Planar_Mover.Done AND NOT ready THEN
	XboxController.init();
END_IF

SetPoint();
		Planar_Mover.fbMover[1].SetExternalSetpoint( XPPosition[1], ZeroVector, ZeroVector);
		
Tilt();
Rotation(); 
ButtonXY();
ButtonA(); 
Bumpers(); 

		]]></ST>
    </Implementation>
    <Folder Name="Inputs" Id="{98128aef-eff9-4f20-84bf-a2b24da7a685}" />
    <Method Name="Bumpers" Id="{96d0df2f-70ae-484c-8c3e-db0115704587}" FolderPath="Inputs\">
      <Declaration><![CDATA[METHOD Bumpers 
VAR_INPUT
END_VAR
VAR 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//Hold down for automatic raise and lowering

TON1(IN := XboxController1.P_Buttons.bLeft_Shoulder, PT := T#0.5S); 
TON2(IN := XboxController1.P_Buttons.bRight_Shoulder, PT := T#0.5S); 

IF TON1.Q THEN
	SmoothingTon1.IN := TRUE AND NOT SmoothingTon1.Q;
ELSE
	SmoothingTon1.IN := FALSE;		
END_IF

IF TON2.Q THEN
	SmoothingTon2.IN := TRUE AND NOT SmoothingTon2.Q;
ELSE
	SmoothingTon2.IN := FALSE;
END_IF

//OSR to make sure only one is seen per click 
R_TRIG1(CLK:=XboxController1.P_Buttons.bLeft_Shoulder , Q=> );
R_TRIG2(CLK:=XboxController1.P_Buttons.bRight_Shoulder, Q=> );

IF (R_TRIG1.Q OR SmoothingTon1.Q) AND Height >= -0.35 THEN 
	Height :=  Height - 0.15;
ELSIF (R_TRIG2.Q OR SmoothingTon2.Q) AND Height < 5.0 THEN
	Height := Height + 0.15;
ELSE
	Height := Height; 
END_IF

XpPosition[1].z := Height; 


SmoothingTon1.PT:=T#0.1S;
SmoothingTon2.PT:=T#0.1S;

SmoothingTON1();
SmoothingTON2();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="buttonA" Id="{d4047019-2fe0-424f-99f1-436b9776e207}" FolderPath="Inputs\">
      <Declaration><![CDATA[METHOD buttonA : LREAL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF XboxController.Ready AND NOT PLanar_Mover.fbMover[1].Error THEN
		
		//Rotation Handeling
		// Find Nearest X
		IF LREAL_TO_INT(MoverPos[1].X) MOD 120 < 60 THEN
			DestinationX	:= 120 * MODTURNS( MoverPos[1].X , 120 );
		ELSE
			DestinationX	:= 120 * (MODTURNS( MoverPos[1].X, 120 ) + 1);
		END_IF
		
		// Find Nearest Y
		IF LREAL_TO_INT(MoverPos[1].Y) MOD 120 < 60 THEN
			DestinationY	:= 120 * MODTURNS( MoverPos[1].Y , 120 );
		ELSE
			DestinationY	:= 120 * (MODTURNS( MoverPos[1].Y, 120 ) + 1);
		END_IF
		
		//Set Boundries for X
		IF DestinationX = 0 THEN
			DestinationX := DestinationX + 120;
		ELSIF DestinationX = 960 THEN
			DestinationX := DestinationX - 120;
		END_IF 	
		
		//Set Boundries for Y
		IF DestinationY = 0 THEN 
			DestinationY := DestinationY + 120;
		ELSIF DestinationY = 720 THEN
			DestinationY := DestinationY - 120;
		END_IF 

		//Move to Nearest Rotation point
		//IF  XBoxController1.P_Buttons.bA_Button THEN
			IF XBoxController1.P_Buttons.bA_Button AND MoverPos[1].X < DestinationX THEN
				XpPosition[1].X := XpPosition[1].X + ( 40 * Constraints.deltaT );
			ELSIF XBoxController1.P_Buttons.bA_Button AND MoverPos[1].X > DestinationX THEN
				XpPosition[1].X := XpPosition[1].X -( 40 * Constraints.deltaT );
			END_IF;
			
			IF XBoxController1.P_Buttons.bA_Button AND MoverPos[1].Y < DestinationY THEN
				XpPosition[1].Y := XpPosition[1].Y + ( 40 * Constraints.deltaT );
			ELSIF XBoxController1.P_Buttons.bA_Button AND MoverPos[1].Y > DestinationY THEN
				XpPosition[1].Y := XpPosition[1].Y -( 40 * Constraints.deltaT );
			END_IF;
	
			
			//Checking to make sure Tile is within 2 mm +- of a point that is modulo by 120 and = 0 and then truning a bool true or false
			IF (((LREAL_TO_INT(MoverPos[1].x) MOD 120) >= 119) OR (LREAL_TO_INT(MoverPos[1].x) MOD 120) <= 1 ) THEN
				XPOint := TRUE; 
			ELSE 
				XPoint := FALSE; 
			END_IF
			
			IF (((LREAL_TO_INT(MoverPos[1].y) MOD 120) >= 119) OR ((LREAL_TO_INT(MoverPos[1].y) MOD 120) <= 1) ) THEN
				YPOint := TRUE; 
			ELSE
				YPoint := FALSE;
			END_IF	
		
		
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="buttonXY" Id="{967b01a0-bed2-4668-8f29-c30fcbedb8da}" FolderPath="Inputs\">
      <Declaration><![CDATA[METHOD buttonXY : LREAL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF XboxController.Ready AND NOT PLanar_Mover.fbMover[1].Error THEN
	

			//Lock into X movement
		IF XboxController1.P_Buttons.bX_Button THEN
			XpPosition[1].y := XpPosition[1].y ;
		ELSE
			//
		END_IF
		
		//Lock into Y movement
		IF XboxController1.P_Buttons.bY_Button THEN
			XpPosition[1].x := XpPosition[1].x ;
		ELSE
			//
		END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="init" Id="{7ca5d38a-440c-4883-9264-fd731c2e759e}">
      <Declaration><![CDATA[METHOD init 
VAR_INPUT
END_VAR

VAR




END_VAR	

]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF Planar_mover.MoverState = 3 THEN
	CASE nCase OF 
	1:
		IF Constraints.Restarting THEN
			Constraints.Restarting := FALSE;
			nCase := 4;
		//Wait to Start 
		ELSIF NOT  XboxController1.P_Buttons.bStart OR START THEN
			Start := FALSE;
			nCase := 2;
		END_IF
	
	2:
	
	
		//Mover to Play positions
		Planar_Mover.fbMover[1].MoveToPosition(Planar_Mover.cmdFb[1] , Planar_Mover.stMoverPositions[5], Planar_Mover.fbDynMove[1], 0);    
		nCase := 3;
	3:
	
		IF 	Planar_Mover.cmdFB[1].Done THEN
			nCase := 4; 
		END_IF
	
	4:
		//Update Positions
		IF Planar_Mover.cmdFB[1].Done  AND NOT Planar_Mover.cmdFB[1].Busy AND NOT Planar_Mover.cmdFB[2].Busy  THEN
			XpPosition[1].y := MoverPos[1].y; 
			XpPosition[1].x := MoverPos[1].x; 
			XpPosition[1].z := MoverPos[1].z;
			XpPosition[1].c := MoverPos[1].c;
			nCase := 5;
		END_IF
	
	
	5:
	
		//Start External Setpoint Generatior
		Planar_Mover.fbmover[1].StartExternalSetpointGeneration(Planar_Mover.cmdFB[1], Planar_Mover.stExtOptions[1]); 
		nCase := 6; 
	6:
		Ready := TRUE; 
 
		
	END_CASE
ELSIF Planar_Mover.fbMover[1].Error THEN 
	nCase := 1;
	Planar_Mover.fbMover[1].Reset(Planar_Mover.cmdFB[1]); 
	Planar_Mover.init(); 
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="rotation" Id="{82bf040d-5134-4d43-91db-f977c511f1a1}" FolderPath="Inputs\">
      <Declaration><![CDATA[METHOD rotation : LREAL
VAR_INPUT
END_VAR

VAR
	filtered_output: LREAL;
	ramp_factor: LREAL;
	ramped_input: LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF XboxController.Ready AND NOT PLanar_Mover.fbMover[1].Error THEN

// Min Rotation
MaxNegRot := MoverPos[1].c - 10; 
MaxPosRot := MoverPos[1].C + 10;
		
// Set the initial value of the filtered output
filtered_output := XpPosition[1].c;

// Set the smoothing factor (alpha) and ramping factor (ramp_factor) to values between 0 and 1
alpha := 0.03;
ramp_factor := 0.002;

// Calculate the ramped value of the input signal
ramped_input := ramp_factor * (XboxController1.P_Left_Trigger - XboxController1.P_Right_Trigger);

C_VALUE := MOverPos[1].c; 

//Modded C Value
//Make sure to not divide by 0 
IF  C_VALUE <> 0 THEN
	MODDED_C:=MODABS(C_Value,90);
END_IF	
				
		//Endless Rotation 
		// rotation stopped working 
		IF XPoint AND YPoint THEN
			IF XboxController1.P_Right_Trigger >= 5 AND XboxController1.P_Left_Trigger <= 5 THEN
				//Negative Rotation
				XpPosition[1].c := XpPosition[1].c - (RotationScailing * XboxController1.P_Right_Trigger);
			ELSIF XboxController1.P_Left_Trigger >= 5 AND XboxController1.P_Right_Trigger <= 5 THEN
				//Positive Rotation 
				XpPosition[1].c := XpPosition[1].c + (RotationScailing * XboxController1.P_Left_Trigger);
			ELSE 
				//Nothing
			END_IF
		ELSE 
			// Apply exponential smoothing to the ramped input signal and limit the output to the range [-10, 10]
			XpPosition[1].c := LIMIT(MaxNegRot, filtered_output + ramped_input - alpha * (filtered_output - ramped_input), MaxPosRot);
		END_IF
		

		
		
		//Cant move out of rotation point unless within 10 degress 
		IF Modded_C > 10 AND Modded_C < 80 THEN
			PastPos10 := TRUE;
		ELSE 
			PastPos10 := FALSE; 
		END_IF
		
		
		
		
		
		
		
		//Set C back to 0
		(*IF XboxController1.P_Left_Trigger >= 98 AND XboxController1.P_Right_Trigger >= 98 THEN
			//Makes sure its intentinal 
			StartTimer := TRUE;
		END_IF*)
		//This simply does not work 
		(*IF Timer.Q THEN 
			IF Modded_C <= 10 THEN 
					XpPosition[1].C := C_Value - Modded_C; 
			ELSIF Modded_C >= 80 THEN
					XpPosition[1].C := C_Value + ( 90 - Modded_C);
			END_IF
		END_IF *)
		
		
		
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetPoint" Id="{784e570f-0db5-4c55-af43-82556bea4079}">
      <Declaration><![CDATA[METHOD PUBLIC SetPoint 
VAR_INPUT
END_VAR
VAR
	DeltaT: LREAL := 0.000250;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF XboxController.Ready AND NOT PLanar_Mover.fbMover[1].Error THEN
										
		IF  PastPos10 OR  PastNeg10 THEN
			XPPosition[1].x 	:= XPPosition[1].x  ;
			XPPosition[1].Y 	:= XPPosition[1].Y	;
		ELSE
			invertX				:= SEL(XboxController1.P_Left_Joystick.fX < 1,1,-1);
			invertY				:= SEL(XboxController1.P_Left_Joystick.fY < 1,1,-1);	
			// Something is wrong again.  
			XPPosition[1].y		:= XPPosition[1].y + (( EXPT(XboxController1.P_Left_Joystick.fY, 2) / 100 )* 4 * deltaT ) * invertY;
			XPPosition[1].x		:= XPPosition[1].x + (( EXPT(XboxController1.P_Left_Joystick.fX, 2) / 100 )* 4 * deltaT ) * invertX;
		END_IF
		

ELSIF Planar_Mover.fbMover[1].Error THEN
	Ready := FALSE; 
	Planar_Mover.fbMover[1].Reset(Planar_Mover.cmdFB[1]);  
	PLanar_mover.init(); 
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Tilt" Id="{b7f656c9-65b4-413c-9e86-c0350a2ed074}" FolderPath="Inputs\">
      <Declaration><![CDATA[METHOD Tilt : LREAL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF XboxController.Ready AND NOT PLanar_Mover.fbMover[1].Error THEN
			//A tilt 
		XPPosition[1].a		:= 0.008 * XboxController1.p_Right_Joystick.fY;
		
		//B tilt 	
		XPPosition[1].b   	:= 0.008 * XboxController1.p_Right_Joystick.fX; 
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="XboxController">
      <LineId Id="9" Count="1" />
      <LineId Id="2" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="22" Count="2" />
      <LineId Id="91" Count="0" />
      <LineId Id="93" Count="2" />
      <LineId Id="92" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="19" Count="0" />
    </LineIds>
    <LineIds Name="XboxController.Bumpers">
      <LineId Id="58" Count="1" />
      <LineId Id="88" Count="5" />
      <LineId Id="103" Count="2" />
      <LineId Id="95" Count="2" />
      <LineId Id="106" Count="1" />
      <LineId Id="77" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="46" Count="1" />
      <LineId Id="49" Count="8" />
      <LineId Id="27" Count="0" />
      <LineId Id="99" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="XboxController.buttonA">
      <LineId Id="5" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="70" Count="14" />
      <LineId Id="87" Count="11" />
      <LineId Id="69" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="14" Count="10" />
      <LineId Id="28" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="37" Count="0" />
      <LineId Id="42" Count="4" />
      <LineId Id="49" Count="0" />
      <LineId Id="54" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="31" Count="1" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="XboxController.buttonXY">
      <LineId Id="5" Count="0" />
      <LineId Id="26" Count="1" />
      <LineId Id="11" Count="11" />
      <LineId Id="9" Count="1" />
    </LineIds>
    <LineIds Name="XboxController.init">
      <LineId Id="86" Count="1" />
      <LineId Id="5" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="17" Count="3" />
      <LineId Id="13" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="1" />
      <LineId Id="15" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="70" Count="3" />
      <LineId Id="124" Count="1" />
      <LineId Id="120" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="48" Count="2" />
      <LineId Id="74" Count="1" />
      <LineId Id="105" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="89" Count="0" />
    </LineIds>
    <LineIds Name="XboxController.rotation">
      <LineId Id="13" Count="0" />
      <LineId Id="254" Count="1" />
      <LineId Id="284" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="258" Count="8" />
      <LineId Id="256" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="6" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="61" Count="6" />
      <LineId Id="275" Count="1" />
      <LineId Id="136" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="267" Count="0" />
      <LineId Id="72" Count="1" />
      <LineId Id="215" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="277" Count="6" />
      <LineId Id="221" Count="5" />
      <LineId Id="83" Count="4" />
      <LineId Id="60" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="122" Count="4" />
      <LineId Id="120" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="227" Count="1" />
      <LineId Id="121" Count="0" />
      <LineId Id="58" Count="0" />
    </LineIds>
    <LineIds Name="XboxController.SetPoint">
      <LineId Id="5" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="479" Count="0" />
      <LineId Id="528" Count="0" />
      <LineId Id="544" Count="0" />
      <LineId Id="568" Count="2" />
      <LineId Id="162" Count="0" />
      <LineId Id="571" Count="1" />
      <LineId Id="163" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="426" Count="0" />
      <LineId Id="444" Count="0" />
      <LineId Id="424" Count="1" />
    </LineIds>
    <LineIds Name="XboxController.Tilt">
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="3" />
      <LineId Id="9" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>